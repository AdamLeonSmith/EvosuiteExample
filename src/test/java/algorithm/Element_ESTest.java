/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 22 12:45:54 GMT 2020
 */

package algorithm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import algorithm.Element;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Element element0 = new Element('C');
      Element element1 = new Element('-');
      assertEquals(2, element1.precedenta);
      
      element1.precedenta = (-1);
      int int0 = element0.compare(element1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Element element0 = new Element('J');
      // Undeclared exception!
      try { 
        element0.compare((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("algorithm.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Element element0 = new Element(')');
      assertEquals(')', element0.operator);
      assertEquals(4, element0.precedenta);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Element element0 = new Element('(');
      assertEquals(4, element0.precedenta);
      assertEquals('(', element0.operator);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Element element0 = new Element('C');
      Element element1 = new Element('-');
      assertEquals(2, element1.precedenta);
      
      element1.precedenta = (-1);
      int int0 = element1.compare(element0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Element element0 = new Element('+');
      assertEquals('+', element0.operator);
      assertEquals(2, element0.precedenta);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Element element0 = new Element('x');
      assertEquals(3, element0.precedenta);
      assertEquals('x', element0.operator);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Element element0 = new Element('/');
      String string0 = element0.toString();
      assertEquals(3, element0.precedenta);
      assertEquals(" / ", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Element element0 = new Element('-');
      int int0 = element0.compare(element0);
      assertEquals(2, element0.precedenta);
      assertEquals('-', element0.operator);
      assertEquals(0, int0);
  }
}
