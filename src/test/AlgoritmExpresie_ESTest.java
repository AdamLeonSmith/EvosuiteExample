/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 22 12:42:36 GMT 2020
 */

package algorithm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import algorithm.AlgoritmExpresie;
import javax.swing.JTextArea;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlgoritmExpresie_ESTest extends AlgoritmExpresie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("", 758, 1);
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertNotNull(jTextArea0);
      
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("4/");
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertNotNull(jTextArea0);
      
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        AlgoritmExpresie.CalculeazaExpresia((JTextArea) null, (JTextArea) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("algorithm.AlgoritmExpresie", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.operator('x');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.operator('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.operator('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.operator('/');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.operator('*');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.verify('A');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.verify('x');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.verify('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.verify('/');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.verify('+');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = AlgoritmExpresie.verify('(');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("x", 273, 273);
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertNotNull(jTextArea0);
      
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertFalse(jTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("2Tto4.~XN\"rRxF@/ ");
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertNotNull(jTextArea0);
      
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("}2-;xR_$?awO\"");
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertNotNull(jTextArea0);
      
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("S)(1`Y/upPw)");
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertFalse(jTextArea0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("+", 273, 273);
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertFalse(jTextArea0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea("S)(1`Y/upPw)");
      JTextArea jTextArea1 = new JTextArea("-");
      AlgoritmExpresie.CalculeazaExpresia(jTextArea1, jTextArea0);
      assertTrue(jTextArea1.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JTextArea jTextArea0 = new JTextArea(" ", 0, 0);
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      AlgoritmExpresie.CalculeazaExpresia(jTextArea0, jTextArea0);
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AlgoritmExpresie algoritmExpresie0 = new AlgoritmExpresie();
  }
}
